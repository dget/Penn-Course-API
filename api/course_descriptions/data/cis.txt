[null, null, {"offercode": "(C)", "crosslist": "", "num": "099", "description": "099. Undergraduate Research/Independent Study. (C) A maximum of 2 c.u. of CIS 099 may be applied toward the B.A.S. or B.S.E. degree requirements. \n\nAn opportunity for the student to become closely associated with a professor (1) in a research effort to develop research skills and techniques and/or (2) to develop a program of independent in-depth study in a subject area in which the professor and student have a common interest.  The challenge of the task undertaken must be consistent with the student's academic level.  To register for this course, the student must submit a detailed proposal, signed by the independent study supervisor, to the SEAS Office of Academic Programs (111 Towne) no later than the end of the \"add\" period.\n\n(One-term course offered either term.)", "title": "099. Undergraduate Research/Independent Study. (C)"}, {"offercode": "(A)", "crosslist": "", "num": "101", "description": "L/L 101. Introduction to Computer Science. (A) Corequisite(s): Math 104 or Math 150. \n\nThis course is an introduction to the basic principles and great ideas of computer science intended for non-engineering students.  It covers some of the essential topics of contemporary computer science from a mathematical perspective. \n\nNo programming experience necessary.  Open to all non-SEAS students.  SEAS students may not take for credit toward their engineering degree.\n\n(Course offered in fall term only.)", "title": "101. Introduction to Computer Science. (A)"}, {"offercode": "(C)", "crosslist": "(ANTH258)", "num": "106", "description": "106. (ANTH258) Visualizing the Past. (C) \n\nMost people's information about the Past is drawn from coffee table picture books, popular movies, video games, documentaries about discoveries of \"ancient, mysterious, and lost\" civilizations, and tours often lead by guides of limited or even dubious credentials.  How are these ideas presented, formed, and circulated?  Who creates and selects the information presented in this diverse media?  Are these presentations accurate?  Do they promote or hurt scientific explanations?  Can the artistic, aesthetic, and scientific realms be bridged to effectively promote and interpret the past? \n\nHow can modern technologies be applied to do a better job at presenting what is difficult to experience firsthand?  This class will focus on case studies, critiques, and methods of how archaeology and the past are created, presented and used in movies, museums, games, the internet, and art. \n\n Each year, the studio-seminar focuses on a project.  In addition to exploring general concepts of archaeology and the media, students will work in teams to produce an interactive, digital media exhibit using the latest modeling visualization programs for presenting the sacred landscape of the Inca capital of Cuzco, Peru.  Cuzco is one of the most important UNESCO World Heritage sites and visited by nearly a million tourists a year.  Potential class projects include fly-throughs of architectural and landscape renderings, simulations of astronomy and cosmology, modeling of human behavior within architectural and landscape settings, and study artifacts in the Penn Museum.\n\n(One-term course offered either term.)", "title": "106. (ANTH258) Visualizing the Past. (C)"}, {"offercode": "(C)", "crosslist": "", "num": "110", "description": "L/R 110. Introduction to Computer Programming (with Java, for beginners). (C) \n\nHow do you program computers to accomplish tasks?  How do you break down a complex task into simpler ones?  CIS 110 is a \"Java lite\" course that covers the fundamentals of object-oriented programming such as objects, classes, state, methods, loops, arrays, inheritance, and recursion using the Java programming language.\n\n(One-term course offered either term.)", "title": "110. Introduction to Computer Programming (with Java, for beginners). (C)"}, {"offercode": "(C)", "crosslist": "(PPE 112)", "num": "112", "description": "112. (PPE 112) Networked Life. (C) \n\nHow does Google find what you're looking for...  and exactly how do they make money doing so?  What properties might we expect any social network (such as the Penn Facebook) to reliably have, and are there \"simple\" explanations for them?  How does your position in a social or economic network (dis)advantage you, and why?  What might we mean by the economics of spam?  What do game theory and the Paris subway have to do with Internet routing? \n\nNetworked Life looks at how our world is connected -- socially, economically, strategically and technologically -- and why it matters.\n\n(One-term course offered either term.)", "title": "112. (PPE 112) Networked Life. (C)"}, {"offercode": "(C)", "crosslist": "", "num": "120", "description": "L/R 120. Programming Languages and Techniques I. (C) \n\nA fast-paced introduction to the fundamental concepts of programming and software design.  This course assumes some previous programming experience, at the level of a high school computer science class or CIS110. (If you got at least 4 in the AP Computer Science A or AB exam, you will do great.) No specific programming language background is assumed: basic experience with any language (for instance Java, C, C++, VB, Python, Perl, or Scheme) is fine.  If you have never programmed before, you should take CIS 110 first.\n\n(One-term course offered either term.)", "title": "120. Programming Languages and Techniques I. (C)"}, {"offercode": "(B)", "crosslist": "", "num": "121", "description": "L/R 121. Programming Languages and Technigues II: Data Structures in Java. (B) Prerequisite(s): CIS 120, CIS 160. \n\nThis is an introductory course about Basic Algorithms and Data Structures using the Java programming language.  We introduce elementary concepts about the complexity of an algorithm and methods for analyzing the running time of software.  We describe data structures like stacks, queues, lists, trees, priority queues, maps, hash tables and graphs, and we discuss how to implement them efficiently and how to use them in problems-solving software.  A larger project introducing students to some of the challenges of software development concludes the course.\n\n(Course offered in spring term only.)", "title": "121. Programming Languages and Technigues II: Data Structures in Java. (B)"}, {"offercode": "", "crosslist": "(EAS 125)", "num": "125", "description": "125. (EAS 125) Technology and Policy. \n\nHave you ever wondered why sharing music and video generates such political and legal controversies?  Is information on your PC safe and should law enforcement be able to access information you enter on the Web?  Will new devices allow tracking of your every move and every purchase?  CIS 125 is focused on developing an understanding of existing and emerging technologies, along with the political, societal and economic impacts of those technologies. The technologies are spread across a number of engineering areas and each of them raise issues that are of current concern or are likely to be a future issue.", "title": "125. (EAS 125) Technology and Policy."}, {"offercode": "(A)", "crosslist": "(COGS001, LING105, PHIL044, PPE 140, PSYC107)", "num": "140", "description": "140. (COGS001, LING105, PHIL044, PPE 140, PSYC107) Introduction to Cognitive Science. (A) \n\nHow do minds work?  This course surveys a wide range of answers to this question from disciplines ranging from philosophy to neuroscience.  The course devotes special attention to the use of simple computational and mathematical models.  Topics include perception, learning, memory, decision making, emotion and consciousness.\n\n(Course offered in fall term only.)", "title": "140. (COGS001, LING105, PHIL044, PPE 140, PSYC107) Introduction to Cognitive Science. (A)"}, {"offercode": "(B)", "crosslist": "", "num": "160", "description": "L/R 160. Mathematical Foundations of Computer Science. (B) \n\nWhat are the basic mathematical concepts and techniques needed in computer science?  This course provides an introduction to proof principles and logics, functions and relations, induction principles, combinatorics and graph theory, as well as a rigorous grounding in writing and reading mathematical proofs.\n\n(Course offered in spring term only.)", "title": "160. Mathematical Foundations of Computer Science. (B)"}, {"offercode": "(C)", "crosslist": "", "num": "190", "description": "190. C++ Programming. (C) Prerequisite(s): CIS 240. \n\nThis course will provide an introduction to programming in C++ and is intended for students who already have some exposure to programming in another language such as Java, C++ provides the programmer with a greater level of control over machine resources and are commonly used in situations where low level access or performance are important.  This course will illuminate the issues associated with programming at this level and will cover issues such as explicit memory management, pointers, the compilation process and debugging. The course will involve several programming projects which will provide students with the experience they need to program effectively in these languages.  This course assumes programming experience equivalent to CIS 110, CIS 120 or ESE 112.\n\n(One-term course offered either term.)", "title": "190. C++ Programming. (C)"}, {"offercode": "(C)", "crosslist": "", "num": "191", "description": "191. Using and Understanding Unix and Linux. (C) Prerequisite(s): CIS 110 or equivalent. \n\nUnix, in its many forms, runs much of the world's computer infrastructure, from cable modems and cell phones to the giant clusters that power Google and Amazon.  This half-credit course provides a thorough introduction to Unix and Linux.  Topics will range from critical basic skills such as examin and editing files, compiling programs and writing shell scripts, to higher level topics such as the architecture of Unix and its programming model.  The material learned is applicable to many classes, including CIS 240, CIS 331, CIS 341, CIS 371, and CIS 380.\n\n(One-term course offered either term.)", "title": "191. Using and Understanding Unix and Linux. (C)"}, {"offercode": "(C)", "crosslist": "", "num": "192", "description": "192. Python Programming. (C) Prerequisite(s): CIS 110, CIS 120 or ESE 112. \n\nThe Python programming is an amazing, concise, and powerful language that is useful for tasks large and small.  As a scripting language, it has a clear and straight forward syntax allowing for easy code reuse, but it is also object-oriented with extensive libraries which make it surprisingly useful for large projects as well.  Python's power and clear syntax has made it one of the most popular scripting languages in use today, \"a must know language.\" This course will provide an introduction to this remarkable language using hands-on experience, revolving around programming assignments that are designed to give students a command of the language and exposure to a wide range of library modules.\n\n(One-term course offered either term.)", "title": "192. Python Programming. (C)"}, {"offercode": "(C)", "crosslist": "", "num": "193", "description": "193. C# Programming. (C) Prerequisite(s): CIS 110. \n\nC# is the premier programming language for the .NET framework.  Over the last decade, the language has evolved to meet the needs of a variety of programming styles while supporting the ever-growing capabilities of the the .NET runtime and libraries.  This course provides a thorough introduction to the C# language and the .NET framework, building on the skills gained in the introductory programming courses (CIS 110, CIS 120, or ESE 112).  In addition to providing the student with a solid background in C#, this course also explores topics that the .NET platform exposes such as object oriented design, .NET runtime internals, and others based on class interest.  A series of short, weekly homework assignments reinforces the concepts introduced in class and a group-based final project of the students' design allows them to apply their C# knowledge toward a substantial problem.\n\n(One-term course offered either term.)", "title": "193. C# Programming. (C)"}, {"offercode": "(A)", "crosslist": "", "num": "240", "description": "240. Introduction to Computer Architecture. (A) Prerequisite(s): CIS 110 or equivalent experience. \n\nYou know how to program, but do you know how computers really work?  How do millions of transistors come together to form a complete computing system? This bottom-up course begins with transistors and simple computer hardware structures, continues with low-level programming using primative machine instructions, and finishes with an introduction to all aspects of computer systems architecture and serves as the foundation for subsequent computer systems courses, such as Digital Systems Organization and Design (CIS 371), Computer Operating Systems (CIS 380), and Compilers and Interpreters (CIS 341). \n\n The course will consider the SPARC architecture, boolean logic, number systems,and computer arithmetic; macro assembly language programming and subroutine linkages; the operating system interface and input/output; understanding the output of the C compiler; the use of the C programming language to generate specific assembly language instructions.\n\n(Course offered in fall term only.)", "title": "240. Introduction to Computer Architecture. (A)"}, {"offercode": "(B)", "crosslist": "", "num": "261", "description": "L/R 261. Discrete Probability, Stochastic Processes, and Statistical Inference. (B) Prerequisite(s): CIS 160 or equivalent. \n\nThis course tightly integrates the theory and applications of discrete probability, discrete stochastic processes, and discrete statistical inference in the study of computer science.  The course will introduce the Minimum Description Length Paradigm to unite basic ideas about randomness, inference and computation.  Students will be expected to use the Maple programming environment in homework exercises which will include numerical and symbolic computations, simulations, and graphical displays.\n\n(Course offered in spring term only.)", "title": "261. Discrete Probability, Stochastic Processes, and Statistical Inference. (B)"}, {"offercode": "(A)", "crosslist": "", "num": "262", "description": "L/R 262. Automata, Computability, and Complexity. (A) Prerequisite(s): CIS 160. \n\nThis course explores questions fundamental to computer science such as which problems cannot be solved by computers, can we formalize computing as a mathematical concept without relying upon the specifics of programming languages and computing platforms, and which problems can be solved efficiently.  The topics include finite automata and regular languages, context-free grammars and pushdown automata, Turing machines and undecidability, tractability and NP-completeness.  The course emphasizes rigorous mathematical reasoning as well as connections to practical computing problems such as test processing, parsing, XML query languages, and program verification.\n\n(Course offered in fall term only.)", "title": "262. Automata, Computability, and Complexity. (A)"}, {"offercode": "(C)", "crosslist": "", "num": "277", "description": "277. Introduction to Computer Graphics Techniques. (C) Prerequisite(s): CIS 120. \n\nThis course is focused on programming the essential geometric and mathematical concepts underlying modern computer graphics.  Using 2D and 3D implementations, it covers fundamental topics on scene graphs, computational geometry, graphics algorithms, and user interface design.  Programming languages introduced include C++, OpenGL, FLTK and Python.\n\n(One-term course offered either term.)", "title": "277. Introduction to Computer Graphics Techniques. (C)"}, {"offercode": "(B)", "crosslist": "", "num": "320", "description": "320. Introduction to Algorithms. (B) Prerequisite(s): CIS 120, 121, 160, 262. \n\nHow do you optimally encode a text file?  How do you find shortest paths in a map?  How do you desgin a communication network?  How do you route data in a network?  What are the limits of efficient computation?  This course gives a comprehensive introduction to design and analysis of algorithms, and answers along the way to these and many other interesting computational questions. You will learn about problem-solving; advanced data structures such as universal hashing and red-black trees; advanced design and analysis techniques such as dynamic programming and amortized analysis; graph algorithms such as minimum spanning trees and network flos; NP-completeness theory; and approximation algorithms.\n\n(Course offered in spring term only.)", "title": "320. Introduction to Algorithms. (B)"}, {"offercode": "(A)", "crosslist": "", "num": "330", "description": "330. Design Principles of Information Systems. (A) Prerequisite(s): CIS 121 and 160. \n\nIntroduction to database management systems and principles of design.  The Entity-Relationship model as a modeling tool.  The relational model: formal languages, the industry standard SQL, relational design theory, query optimization. \n\nStoring and querying XML data.  Recursive queries, Views and data integration.  Overview of system level issues: physical data organizaiton, indexing techniques, and transactions.  Connecting databases to the Web.  Course work requires programming in several different query languages, several written homeworks and a team project.\n\n(Course offered in fall term only.)", "title": "330. Design Principles of Information Systems. (A)"}, {"offercode": "(M)", "crosslist": "", "num": "334", "description": "334. Advanced Topics in Algorithms. (M) Prerequisite(s): CIS 320. \n\nCan you check if two large documents are identical by examining a small number of bits?  Can you verify that a program has correctly computed a function without ever computing the function?  Can students compute the average score on an exam without ever revealing their scores to each other?  Can you be convinced of the correctness of an assertion without ever seeing the proof? The answer to all these questions is in the affirmative provided we allow the use of randomization.  Over the past few decades, randomization has emerged as a powerful resource in algorithm desgin.  This course would focus on powerful general techniques for designing randomized algorithms as well as specific representative applications in various domains, including approximation algorithms, cryptography and number theory, data structure design, online algorithms, and parallel and distributed computation.\n\n(Course not offered every year.)", "title": "334. Advanced Topics in Algorithms. (M)"}, {"offercode": "(M)", "crosslist": "", "num": "341", "description": "341. Compilers and Interpreters. (M) Prerequisite(s): Two semesters of programming courses, e.g., CIS 120-121, and CIS 240. \n\nYou know how to program, but do you know how to implement a programming language?  In CIS341 you'll learn how to build a compiler.  Topics covered include: lexical analysis, grammars and parsing, intermediate representations, syntax-directed translation, code generation, type checking, simple dataflow and control-flow analyses, and optimizations.  Along the way, we study objects and inheritance, first-class functions (closures), data representation and runtime-support issues such as garbage collection.  This is a challenging, implementation-oriented course in which students build a full compiler from a simple, typed object-oriented language to fully operational x86 assembly.  The course projects are implemented using OCaml, but no knowledge of OCaml is assumed.\n\n(Course not offered every year.)", "title": "341. Compilers and Interpreters. (M)"}, {"offercode": "(M)", "crosslist": "", "num": "350", "description": "350. Software Design/Engineering. (M) Prerequisite(s): CIS 240. \n\nLarge systems versus small programs.  Problems of scale.  Software life-cycle: design phase, implementation phase, testing, maintenance.  Software re-use. Tools/Toolkits/Libraries.  Programming as a group activity.  Support tools, e.g., SCCS and RCS.  Standards.  Software readability and structure.  Reading code.  Style sheets.  Software Testing: role in process, test cases, testers. Documentation.  Embedded documentation and external documentation.\n\n(Course not offered every year.)", "title": "350. Software Design/Engineering. (M)"}, {"offercode": "(C)", "crosslist": "", "num": "368", "description": "368. User Interfaces and the Web. (C) Prerequisite(s): CIS 110, CIS 120, CIS 121, CIS 277. \n\nThis course will teach the fundamentals of Human-Computer Interaction (theory, design, implementation, experimentation, evaluation) in the context of current web interaction mechanisms, technologies, and applications.  The course content will emphasize and leverage open source technologies to design, prototype, implement, and test user- interfaces and functionality in the context of today's most intriguing web trend, social networking.\n\n(One-term course offered either term.)", "title": "368. User Interfaces and the Web. (C)"}, {"offercode": "(B)", "crosslist": "", "num": "371", "description": "371. Computer Organization and Design. (B) Prerequisite(s): CIS 240. \n\nThis is the second computer oganization course and focuses on computer hardware design.  Topics covered are: (1) basic digital system design including finite state machines, (2) instruction set design and simple RISC assembly programming, (3) quantitative evaluation of computer performance, (4) circuits for integer and floating-point arithmatic, (5) datapath and control, (6) micro-programming, (7) pipeling, (8) storage hierarchy and virtual memory, (9) input/output, (10) different forms of parallelism including instruction level parallelism, data-level parallelism using both vectors and message-passing multi-processors, and thread-level parallelism using shared memory multiprocessors. \n\nBasic cache coherence and synchronization.\n\n(Course offered in spring term only.)", "title": "371. Computer Organization and Design. (B)"}, {"offercode": "(A)", "crosslist": "", "num": "380", "description": "380. Computer Operating Systems. (A) Prerequisite(s): CIS 240. \n\nThis course surveys methods and algorithms used in modern operating systems. Concurrent distributed operation is emphasized.  The main topics covered are as follows: process synchronization; interprocess communication; concurrent/distributed programming languages; resource allocation and deadlock; virtual memory; protection and security; distributed operation; distributed data; performance evalaution.\n\n(Course offered in fall term only.)", "title": "380. Computer Operating Systems. (A)"}, {"offercode": "(M)", "crosslist": "(MEAM420, MEAM520)", "num": "390", "description": "390. (MEAM420, MEAM520) Machine Perception. (M) Prerequisite(s): MATH 240, PHYS 150 or MEAM 110/147. \n\nThe rapidly evolving field of robotics includes systems designed to replace, assist, or even entertain humans in a wide variety of tasks.  Recent examples include planetary rovers, robotic pets, medical surgical-assistive devices, and semi- autonomous search-and-rescue vehicles.  This introductory-level course presents the fundamental kinematic, dynamic, and computational principles underlying most modern robotic systems.  The main topics of the course include: coordinate transformations, manipulator kinematics, mobile-robot kinematics, actuation and sensing, feedback control, vision, motion planning, and learning.  The material is reinforced with hands-on lab exercises including basic robot- arm control and the programming of vision-guided mobile robots.\n\n(Course not offered every year.)", "title": "390. (MEAM420, MEAM520) Machine Perception. (M)"}, {"offercode": "(M)", "crosslist": "", "num": "391", "description": "391. Introduction to Artificial Intelligence. (M) Prerequisite(s): CIS 121 and CIS 262. \n\nArtificial Intelligence is considered from the point of view of a resource-limi knowledge-based agent who must reason and act in the world. Topics include log automatic theorem proving, search, knowledge representation and reasoning, natural language processing, probabilistic reasoning, and machine learning.  Programming assignments in Python.\n\n(Course not offered every year.)", "title": "391. Introduction to Artificial Intelligence. (M)"}, {"offercode": "(C)", "crosslist": "", "num": "398", "description": "398. Quantum Computer and Information Science. (C) Prerequisite(s): CIS 260, 262 and Math 240. \n\nThe purpose of this course is to introduce undergraduate students in computer computer science and engineering to quantum computers (QC) and quantum information science (QIS).  This course is meant primarly for juniors and seniors in CSE.  No prior knowledge of quantum mechanics (QM) is assumed. Enrollment is by permission of the instructor.\n\n(One-term course offered either term.)", "title": "398. Quantum Computer and Information Science. (C)"}, {"offercode": "(A)", "crosslist": "", "num": "400", "description": "400. Senior Project. (A) Prerequisite(s): Senior standing or permission of instructor. \n\nThe goal of the senior design coruse is to provide students with an opportunity to define, design and execute a significant project.  Project subjects may revolve around software, hardware or computational theory. Students must have an abstract of their Senior Project, which is approved and signed by a Project Advisor early in the Fall semester. \n\nThe project is expected to span two semesters; students must enroll in CIS 401 during the second semester.  At the end of the first semester, students are required to submit an intermediate report and give a presentation describing their project and progress.  Grades are based on technical writing skills (as per submited report) presentation skills and progress on the project.  These are evaluated by the Project Adviser and the Course Instructor.\n\n(Course offered in fall term only.)", "title": "400. Senior Project. (A)"}, {"offercode": "(B)", "crosslist": "", "num": "401", "description": "401. Senior Project. (B) Prerequisite(s): CIS 400, senior standing or permission of instructor. \n\nContinuation of CIS 400.  Design and implementation of a significant piece of work: software, hardware or theory. \n\nStudents are required to submit a final written report and give a final presentation and demonstration of their project. \n\nGrades are based on the report, the presentation and the satisfactory completion of the project.  These are evaluated by the Project Adviser and the Course Instructor.\n\n(Course offered in spring term only.)", "title": "401. Senior Project. (B)"}, {"offercode": "(A)", "crosslist": "", "num": "430", "description": "430. Introduction to Human Language Technology. (A) Prerequisite(s): CIS 121. \n\nThis course is an automatic summarization that can help alleviate the information overload problem caused by the unprecedented amount of online textual information.  The building of a summarization system requires good understanding of the properties of human language and the use of various natural language tools.  In this course we will build several summarization systems of increasing complexity and sophistication.  In the process we will learn about various natural language processing tools and resources such as part of speech tagging, chunking, parsing, Wordnet, and machine learning toolkits.  We will also cover probability and statistics concepts used in summarization, but also applicable to a wide range of other language-related tasks.\n\n(Course offered in fall term only.)", "title": "430. Introduction to Human Language Technology. (A)"}, {"offercode": "(C)", "crosslist": "(CIS 555)", "num": "455", "description": "455. (CIS 555) Internet and Web Systems. (C) Prerequisite(s): CIS 121 and CIS 380 recommended. \n\nThis course focuses on Internet and Web technologies and the underlying principles of distributed systems, information retrieval, and data management. The material covered will include web and applications server architectures, XML and semistructured data, schema mediation, document indexing and retrievalpeer-to-peer systems, distributed transactions and remote procedure calls.  The course has a substantial group implementation project.\n\n(One-term course offered either term.)", "title": "455. (CIS 555) Internet and Web Systems. (C)"}, {"offercode": "(C)", "crosslist": "(CIS 562)", "num": "462", "description": "462. (CIS 562) Computer Animation. (C) Prerequisite(s): Previous exposure to major concepts in linear algebra (i.e. vector matrix math), curves and surfaces, dynamical systems (e.g.  2nd order mass-spring-damper systems) and 3D computer graphics has also been assumed in the preparation of the course materials. \n\nThis course covers core subject matter common to the fields of robotics, character animation and embodied intelligent agents.  The intent of the course is to provide the student with a solid technical foundation for developing, animating and controlling articulated systems used in interactive computer game virtual reality simulations and high-end animation applications.  The course balances theory with practice by \"looking under the hood\" of current animationsystems and authoring tools and exams the technologies and techniques used from both a computer science and engineering perspective.  Topics covered include: geometric coordinate systems and transformations; quaternions; parametric curves and surfaces; forward and inverse kinematics; dynamic systems and control; computer simulation; keyframe, motion capture and procedural animation; behavior-based animation and control; facial animation; smart characters and intelligent agents.\n\n(One-term course offered either term.)", "title": "462. (CIS 562) Computer Animation. (C)"}, {"offercode": "(M)", "crosslist": "(LING549)", "num": "477", "description": "477. (LING549) Mathematical Methods/Techniques for Linguistics and Natural Language Processing. (M) Prerequisite(s): PHIL 006 or instructor's permission. \n\nBasic concepts of set theory, relations and functions, properties of relations.  Basic concepts of algebra.  Grammars, languages, and automata- finite state grammars, regular expressions, context-free and context-sensitive grammars, unrestricted grammars, finite automata, pushdown automata and other related automata, Turing machines, Syntax and semantics of grammar formalisms. Strong generative capacity of grammars, Grammers as deductive systems, parsing as deduction.  Relevance of formal gammars to modeling biological sequences. The course will deal with these topics in a very basic and introductory manner--ideas of proofs and not detailed proofs, and more importantly with plenty of linguistic examples to bring out the linguistic relevance of these topics. \n\n The course will deal with these topics in a very basic and introductory manner--ideas of proofs and not detailed proofs, and more importantly with plenty of linguistic examples to bring out the linguistic relevance of these topics.\n\n(Course not offered every year.)", "title": "477. (LING549) Mathematical Methods/Techniques for Linguistics and Natural Language Processing. (M)"}, {"offercode": "(M)", "crosslist": "", "num": "480", "description": "480. Real-Time and Embedded Systems. (M) Prerequisite(s): CIS 380, some network programming experience is desirable. \n\nEver increasing availability of inexpensive processors connected by a communication network has motivated the development of numerous concepts and paradigms for distributed real-time embedded systems.  The primary objectives of this course are to study the principles and concepts of real-time embedded computing and to provide students hands- on experience in developing embedded applications.  This course covers the concepts and theory necessary to understand and program embedded real-time systems.  This includes concepts and theory for real-time system design, analysis, and certification; programming and operating systems for embedded systems; and concepts, technologies, and protocols for distributed embedded real-time systems. \n\n The course will cover a variety of existing systems and technologies, e.g., real- machines, architectural description anguage, formal meth and logical-time programming paradigms, and certification The course requires active student participation in-group projects.  Each group will be responsible for the design and implementation of a life-critical embedded system such as a pacemaker.  The group projects are intended to complement the learning of principles and concepts through the application of theory in practice and the development of experimental skills in building embedded applications.\n\n(Course not offered every year.)", "title": "480. Real-Time and Embedded Systems. (M)"}, {"offercode": "(C)", "crosslist": "(CIS 582)", "num": "482", "description": "482. (CIS 582) Logic In Computer Science. (C) Prerequisite(s): CIS 160. \n\nLogic has been called the calculus of computer science as it plays a fundamental role in computer science, similar to that played by calculus in the physical sciences and traditional engineerng disciplines.  Indeed, logic is useful in areas of computer science as disparate as architecture (logic gates), software engineerng (specification and verification), programming languages (semantics, logic programming), databases (relational algebra and SQL), artificial intelligence (automatic theorem proving), algorithms (complexity and expressiveness), and theory of computation (general notions of computability).  CSE 482 provides the students with a thorough introduction to mathematical logic, covering in depth the topics of syntax, semantics, decision procedures, formal proof systems, and soundness and completeness for both propositional and first-order logic.  The material is taught froma computer science perspective, with an emphasis on algorithms, computational complexity, and tools.  Projects will focus on problems in circuit design, specification and analysis and protocols, and query evaluation in databases.\n\n(One-term course offered either term.)", "title": "482. (CIS 582) Logic In Computer Science. (C)"}, {"offercode": "(C)", "crosslist": "", "num": "497", "description": "497. DMD Senior Project. (C) Prerequisite(s): Senior Standing or Permission of the Instructor. \n\nThe goal of this course is to provide an opportunity for seniors to define, desand execute a project of your own choosing that demonstrates the technical skiland abilities that you have acquired during your 4 years as undergraduates. \n\nEvaluation is based on selecting an interesting topic, completing appropriate research on the state of the art in that area, communicating your objectives i writing and in presentations, accurately estimating what resources will be reqto complete your chosen task, coding necessary functionality, and executing your plan.\n\n(One-term course offered either term.)", "title": "497. DMD Senior Project. (C)"}, {"offercode": "(C)", "crosslist": "", "num": "500", "description": "500. Software Foundations. (C) Prerequisite(s): Undergraduate-level course in programming languages or compilers; significant programming experience. \n\nThis course introduces basic concepts and techniques in the foundational study of programming languages.  The central theme is the view of individual programs and whole languages as mathematical objects about which precise claims may be made and proved.  Particular topics include operational techniques for formal definition of language features, type systems and type safety properties, polymorphism and subtyping, foundations of object-oriented programming, and mechanisms supporting information hiding and programming in the large.\n\n(One-term course offered either term.)", "title": "500. Software Foundations. (C)"}, {"offercode": "(C)", "crosslist": "", "num": "501", "description": "L/R 501. Computer Architecture. (C) Prerequisite(s): Knowledge of computer organizaiton and basic programming skills. \n\nThis course is an introductory graduate course on computer architecture with an emphasis on a quantitative approach to cost/performance design tradeoffs. The course covers the fundamentals of classical and modern uniprocessor design: performance and cost issues, instruction sets, pipelining, superscalar, out-of-order, and speculative execution mechanisms, caches, physical memory, virtual memory, and I/O.  Other topics include: static scheduling, VLIW and EPIC, software speculation, long (SIMD) and short (multimedia) vector execution, multithreading, and an introduction to shared memory multiprocessors.\n\n(One-term course offered either term.)", "title": "501. Computer Architecture. (C)"}, {"offercode": "(C)", "crosslist": "", "num": "502", "description": "502. Analysis of Algorithms. (C) Prerequisite(s): CIT 594 or equivalent. \n\nAn investigation of several major algorithms and their uses in areas including list manipulation, sorting, searching, selection and graph manipulation. Efficiency and complexity of algorithms.  Compexity Classes.\n\n(One-term course offered either term.)", "title": "502. Analysis of Algorithms. (C)"}, {"offercode": "(C)", "crosslist": "", "num": "505", "description": "505. Software Systems. (C) Prerequisite(s): Undergraduate-level knowledge of Operating Systems and Networking, programming experience (CIT 594 or equivalent). \n\nThis course provides an introduction to fundamental concepts of distributed systems.  Topics covered include communication, concurrency, programming paradigms, naming, managing shared state, caching, syncronization, reaching agreement, fault tolerance, security, middleware, and distributed applications.\n\n(One-term course offered either term.)", "title": "505. Software Systems. (C)"}, {"offercode": "(M)", "crosslist": "(CIS 410)", "num": "510", "description": "510. (CIS 410) Curves and Surfaces: Theory and Applications. (M) Prerequisite(s): Basic knowledge of linear algebra, calculus, and elementary geometry.  CIS 560 is not required. \n\nThe course is about mathematical and algorithmic techniques used for geometric modeling and geometric design, using curves and surfaces.  There are many applications in computer graphics as well as in robotics, vision, and computational geometry.  Such techniques are used in 2D and 3D drawing and plot, object silhouettes, animating positions, product design (cars, planes, buidlings), topographic data, medical imagery, active surfaces of proteins, attribute maps (color, texture, roughness), weather data, art, etc.  Three broad classes of problems will be considered: approximating curved shapes, using smooth curves or surfaces.  Interpolating curved shapes, using smooth curves or surfaces.  Rendering smooth curves or surfaces.\n\n(Course not offered every year.)", "title": "510. (CIS 410) Curves and Surfaces: Theory and Applications. (M)"}, {"offercode": "(C)", "crosslist": "", "num": "511", "description": "511. Theory of Computation. (C) Prerequisite(s): Basic notions of discrete algebra. \n\nFinite automata (deterministic and nondeterministic) regular graphs, regular expressions, regular grammars, (Nerode congruence), the \"pumping lemma\", closure properties.  Context-free languages.  Standard forms: removal of e-rules, chain rules, reduced grammars.  Chomsky Normal Form.  Context-free languages as fixed points (Ginsburg and Rose's Theorem).  Greibach Normal Form (using Rosenkrantz's matrix method).  Ogden's Lemma and the \"pumping lemma\". Pushdown automata (PDA's).  Equivalence of PDA's and context-free grammars. Brief sketch of top-down and bottom- up (nondeterministic) parsing. Deterministic PDA's.  Closure properties.  Partial recursive functions, Turing machines and RAM programs.  Primitive recursion.  Minimization.  Equivalence of the models.  Church/Turing's thesis. \n\nAcceptable Codings.  A Universal RAM program.  Undecidability of the halting problem.  Recursively enumerable sets (RE sets).\n\n(One-term course offered either term.)", "title": "511. Theory of Computation. (C)"}, {"offercode": "(C)", "crosslist": "(PHIL412)", "num": "518", "description": "SM 518. (PHIL412) Topics in Logic; Finite Model Theory and Descriptive Complexity. (C) \n\nThis course will examine the expressive power of various logical languages over the class of finite structures.  The course begins with an exposition of some of the fundamental theorems about the behavior of first-order logic in the context of finite structures, in particular, the Ehrenfeucht-Fraisse Theorem and the Trahktenbrot Theorem.  The first of these results is used to show limitations on the expressive power of first-order logic over finite structures while the second result demonstrates that the problem of reasoning about finite structures using first-order logic is surprisingly complex.  The course then proceeds to consider various extensions of first-order logic including fixed-point operators, generalized quantifiers, infinitary languages, and higher-order languages.  The expressive power of these extensions will be studied in detail and will be connected to various problems in the theory of computational complexity.  This last motif, namely the relation between descriptive and computational complexity, will be one of the main themes of the course.\n\n(One-term course offered either term.)", "title": "518. (PHIL412) Topics in Logic; Finite Model Theory and Descriptive Complexity. (C)"}, {"offercode": "(A)", "crosslist": "", "num": "520", "description": "520. Machine Learning. (A) Prerequisite(s): Elementary probability, calculus, and linear algebra.  Basic programming experience.\n\n(Course offered in fall term only.)", "title": "520. Machine Learning. (A)"}, {"offercode": "(C)", "crosslist": "", "num": "521", "description": "This course covers the foundations of statistical machine learning.  The focus is on probabilistic and statistical methods for prediction and clustering in high dimensions.  Other topics covered include graphical models, dimensionality reduction, neural networks, and reinforcement learning.  L/R 521. Fundamentals of AI. (C) Prerequisite(s): Students are expected to have the following background: Basic algorithms, data structures and complexity (dynamic programming, queues, stacks, graphs, big-O, P/NP; Basic probability and statistics (random variables, standard distributions, simple regression); Basic linear algebra (matrices, vectors, norms, inverses); Reasonable programming skills. \n\nModern AI uses a collection of techniques from a number of fields in the design intelligent systems:probability, statistics, logic, operations research, optim and economics, to name a few.  This course covers basic modeling and algorithmi from these fields underlying current research and highlights their application computer vision, robotics, and natural language processing.\n\n(One-term course offered either term.)", "title": "521. Fundamentals of AI. (C)"}, {"offercode": "(A)", "crosslist": "", "num": "530", "description": "530. Computational Linguistics. (A) \n\nComputational approaches to the problem of understanding and producing written and spoken natural language, including speech processing, syntactic parsing, statistical and corpus-based techniques, semantic interpretation, discourse meaning, and the role of pragmatics and world knowledge.  It is recommended that students have some knowledge of logic, basic linguistics, and programming.\n\n(Course offered in fall term only.)", "title": "530. Computational Linguistics. (A)"}, {"offercode": "(C)", "crosslist": "(CIS 434)", "num": "534", "description": "534. (CIS 434) Multicore Programming and Architecture. (C) Prerequisite(s): CIS 371 or CIS 501, and significant programming experience. \n\nThis course is a pragmatic examination of multicore programming and the hardware architecture of modern multicore processors.  Unlike the sequential single-core processors of the past, utilizing a multicore processor requires programmers to identify parallelism and write explicitly parallel code. Topicscovered include: the relevant architectural trends and aspects of multicores, approaches for writing multicore software by extracting data parallelism (vectors and SIMD), thread-level parallelism, and task-based parallelism, efficient synchronization, and program profiling and performance tuning.  The course focuses primarily on mainstream shared-memory multicores with some coverage of graphics processing units (GPUs).  Cluster-based supercomputing is not a focus of this course.  Several programming assignments and a course project will provide students first-hand experience with programming, experimentally analyzing, and tuning multicore software. Students are expected to have a solid understanding of computer architecture and strong programming skills (including experience with C/C++).\n\n(One-term course offered either term.)", "title": "534. (CIS 434) Multicore Programming and Architecture. (C)"}, {"offercode": "(A)", "crosslist": "(BIOL535, GCB 535)", "num": "535", "description": "L/L 535. (BIOL535, GCB 535) Introduction to Bioinformatics. (A)\n\n(Course offered in fall term only.)", "title": "535. (BIOL535, GCB 535) Introduction to Bioinformatics. (A)"}, {"offercode": "(A)", "crosslist": "(BIOL536, GCB 536)", "num": "536", "description": "The course covers methods used in computational biology, including the statistical models and algorithms used and the biological problems which they address.  Students will learn how tools such as BLAST work, and will use them to address real problems.  The course will focus on sequence analysis problems such as exon, motif and gene finding, and on comparative methods but will also cover gene expression and proteomics. 536. (BIOL536, GCB 536) Computational Biology. (A) Prerequisite(s): Math 104/114 or equivalent, BIOL 221 or equivalent, or permission of the instructor. \n\nComputational problems in molecular biology, including sequence search and analysis, informatics, phylogenetic reconstruction, genetic mapping and optimization.\n\n(Course offered in fall term only.)", "title": "536. (BIOL536, GCB 536) Computational Biology. (A)"}, {"offercode": "(C)", "crosslist": "(BE  537)", "num": "537", "description": "537. (BE  537) Biomedical Image Analysis. (C) Faculty. Prerequisite(s): Math through multivariate calculus (MATH 241), programming experience, as well as some familiarity with linear algebra, basic physics, and statistics. \n\nThis course covers the fundamentals of advanced quantitative image analysis that apply to all of the major and emerging modalities in biological/biomaterials imaging and in vivo biomedical imaging.  While traditional image processing techniques will be discussed to provide context, the emphasis will be on cutting edge aspects of all areas of image analysis (including registration, segmentation, and high-dimensional statistical analysis).  Significant coverage of state-of-the-art biomedical research and clinical applications will be incorporated to reinforce the theoretical basis of the analysis methods.\n\n(One-term course offered either term.)", "title": "537. (BE  537) Biomedical Image Analysis. (C)"}, {"offercode": "(C)", "crosslist": "", "num": "541", "description": "541. Embedded and Cyber-Phys Systems. (C)\n\n(One-term course offered either term.)", "title": "541. Embedded and Cyber-Phys Systems. (C)"}, {"offercode": "(A)", "crosslist": "", "num": "550", "description": "550. Database and Information Systems. (A) Prerequisite(s): CIT 591 or equivalent. \n\nIntroduction to the theory and practice of database management systems.  The Entity-Relationship approach as a modeling tool.  The relational model, algebra and calculus.  Commercial systems: SQL, Quel and Ingres.  Database design and relational normalization.  Physical data organization and indexing structures.  Updates and integrity: transaction management, concurrency control and recovery techniques.  Logic as a data model: Datalog and evaluation techniques.  The network model and object oriented approaches.\n\n(Course offered in fall term only.)", "title": "550. Database and Information Systems. (A)"}, {"offercode": "(B)", "crosslist": "(TCOM551)", "num": "551", "description": "551. (TCOM551) Computer and Network Security. (B) Prerequisite(s): TCOM 512 or equivalent required; CIS 500 recommended. \n\nThis is an introduction to topics in the security of computer systems and communication on networks of computers. \n\nThe course covers four major areas: fundamentals of cryptography, security for communication protocols, security for operating systems and mobile programs, and security for electronic commerce.  Sample specific topics include: passwords and offline attacks, DES, RSA, DSA, SHA, SSL, CBC, IPSec, SET, DDoS attacks, biometric authentication, PKI, smart cards, S/MIME, privacy on the Web, viruses, security models, wireless security, and sandboxing.  Students will be expected to display knowledge of both theory and practice through written examinations and programming assignments.\n\n(Course offered in spring term only.)", "title": "551. (TCOM551) Computer and Network Security. (B)"}, {"offercode": "(C)", "crosslist": "(TCOM512)", "num": "553", "description": "553. (TCOM512) Networked Systems. (C) Prerequisite(s): CIS 121 (Programming Languages and Techniques II) or equivalent, or permission of the instructor. \n\nThis course provides an introduction to fundamental concepts in the design and implementation of networked systems, their protocols, and applications. Topics to be covered include: Internet architecture, network applications, addressing, routing, quality of service, transport protocols, data link protocols, network security, and application level protocols such as peer-to-peer networks and overlay networks.  The course will involve written assignments, examinations, and programming assignments.\n\n(One-term course offered either term.)", "title": "553. (TCOM512) Networked Systems. (C)"}, {"offercode": "(C)", "crosslist": "(CIS 455)", "num": "555", "description": "555. (CIS 455) Internet and Web Systems. (C) Prerequisite(s): At least one year of Java programming.  Database and operating systems familiarity recommended. \n\nThis course focuses on the issues encountered in building Internet and web systems: scalability, interoperability (of data and code), atomicity and consistency models, replication, and location of resources, services, and data.  Topics include other remote procedure calls, caching, replication, and hierarchical structures; distributed consensus and transactions.  Of particular focus will be techniques for locating machines, resources, and data (including ranked web search, publish/subscribe systems, directories, and peer-to-peer protocols).  This course has a significant project-based component, in order to provide hands-onexperience with the ideas and algorithms discussed.  Students will construct and validate a large-scale distributed system, with some components developed individually and some in teams.\n\n(One-term course offered either term.)", "title": "555. (CIS 455) Internet and Web Systems. (C)"}, {"offercode": "(B)", "crosslist": "(LING525)", "num": "558", "description": "558. (LING525) Computer Analysis and Modeling of Biological Signals and Systems. (B) Prerequisite(s): Undergraduate-level knowledge of linear algebra. \n\nA graduate course intended to introduce the use of signal and image processing tools for analyzing and modeling biological systems.  We present a series of fundamental examples drawn from areas of speech analysis/synthesis, computer vision, and modeling of biological perceptual systems.  Students learn the material through lectures and via a set of computer exercises developed in MATLAB.\n\n(Course offered in spring term only.)", "title": "558. (LING525) Computer Analysis and Modeling of Biological Signals and Systems. (B)"}, {"offercode": "(A)", "crosslist": "(CSE 460)", "num": "560", "description": "560. (CSE 460) Computer Graphics. (A) Prerequisite(s): One year programming experience (C, JAVA, C++). \n\nA thorough introduction to computer graphics techniques, including 3D modeling, rendering, and animation.  Topics cover: geometric transformations, geometric algorithms, software systems (OpenGL), 3D object models (surface and volume), visible surface algorithms, image synthesis, shading and mapping, ray tracing, radiosity, global illumination, photon mapping, anti-aliasing, animation techniques, and virtual environments.\n\n(Course offered in fall term only.)", "title": "560. (CSE 460) Computer Graphics. (A)"}, {"offercode": "(C)", "crosslist": "(CIS 462)", "num": "562", "description": "562. (CIS 462) Computer Animation. (C) Prerequisite(s): Previous exposure to major concepts in linear algebra (i.e. vector matrix math), curves and surfaces, dynamical systems (e.g.  2nd order mass-spring-damper systems) and 3D computer graphics has also been assumed in the preparation of the course materials. \n\nThis course covers core subject matter common to the fields of robotics, character animation and embodied intelligent agents.  The intent of the course is to provide the student with a solid technical foundation for developing, animating and controlling articulated systems used in interactive computer game virtual reality simulations and high-end animation applications.  The course balances theory with practice by \"looking under the hood\" of current animationsystems and authoring tools and exams the technologies and techniques used from both a computer science and engineering perspective.  Topics covered include: geometric coordinate systems and transformations; quaternions; parametric curves and surfaces; forward and inverse kinematics; dynamic systems and control; computer simulation; keyframe, motion capture and procedural animation; behavior-based animation and control; facial animation; smart characters and intelligent agents.\n\n(One-term course offered either term.)", "title": "562. (CIS 462) Computer Animation. (C)"}, {"offercode": "(C)", "crosslist": "", "num": "563", "description": "563. Physically Based Animation. (C) Prerequisite(s): Students should have a good knowledge of object-oriented programming (C++) and basic familiarity with linear algebra and physics.  Some background in computer graphics is helpful. \n\nThis course introduces students to common physically based simulation techniques for animation of fluids and gases, rigid and deformable solids, cloth, explosions, fire, smoke, virtual characters, and other systems. Physicalbased simulation techniques allow for creation of extremely realistic special effects for movies, video games and surgical simulation systems.  We will learn state-of-the-art techniques that are commonly used in current special effects and animation studios and in video games community.  To gain hands-on experience, students will implement basic simulators for several systems.  The topics will include: Particle Systems, Mass spring systems, Deformable Solids & Fracture, Cloth, Explosions & Fire, Smoke, Fluids, Deformable active characters, Simulation and control of rigid bodies, Rigid body dynamics, Collision detection and handling, Simulation of articulated characters, Simulated characters in games.  The course is appropriate for both upper level undergraduate and graduate students.\n\n(One-term course offered either term.)", "title": "563. Physically Based Animation. (C)"}, {"offercode": "(C)", "crosslist": "", "num": "564", "description": "564. Game Design and Development. (C) Basic understanding of 3D graphics and animation principles, prior exposure to scripting and programming languages such as Python, C and C++. \n\nThe intent of the course is to provide students with a solid theoretical understanding of the core creative principles, concepts, and game play structures/schemas underlying most game designs.  The course also will examine game development from an engineering point of view, including: game play mechanics, game engine software and hardware architectures, user interfaces, design documents, playtesting and production methods.\n\n(One-term course offered either term.)", "title": "564. Game Design and Development. (C)"}, {"offercode": "(C)", "crosslist": "", "num": "565", "description": "565. GPU Programming and Architectur. (C) Prerequisite(s): CIS 460 or CIS 560, and familiarity with computer hardware/systems.  The hardware/systems requirement may be met by CIS 501; or CIT 593 and 595; or CIS 240 (with CIS 371 recommended); or equivalent coursework. \n\nThis course examines the architecture and capabilities of modern GPUs.  The graphics processing unit (GPU) has grown in power over recent years, to the point where many computations can be performed faster on the GPU than on a traditional CPU.  GPUs have also become programmable, allowing them to be used for a diverse set of applications far removed from traditional graphics settings.  Topics covered include architectural aspects of modern GPUs, with a special focus on their streaming parallel nature, writing programs on the GPU using high level languages like Cg and BrookGPU, and using the GPU for graphicsand general purpose applications in the area of geometry modelling, physical simulation, scientific computing and games.  Students are expected to have a basic understanding of computer architecture and graphics, and should be proficient in OpenGL and C/C++.\n\n(One-term course offered either term.)", "title": "565. GPU Programming and Architectur. (C)"}, {"offercode": "(M)", "crosslist": "", "num": "570", "description": "570. Modern Programming Language Implementation. (M) Prerequisite(s): CIS 500.  An undergraduate course in compiler construction (CSE 341 or equivalent) is helpful but not required. \n\nThis course is a broad introduction to advanced issues in compilers and run-time systems for several classes of programming languages, including imperative, object-oriented, and functional.  Particular attention is paid to the structures, analyses, and transformations used in program optimization.\n\n(Course not offered every year.)", "title": "570. Modern Programming Language Implementation. (M)"}, {"offercode": "(A)", "crosslist": "(PHIL411)", "num": "571", "description": "571. (PHIL411) Recursion Theory. (A) \n\nThe course covers the basic theory of recursive and recursively enumerable sets and the connection between this theory and a variety of decision problems of interest in a computational setting.  The course will then proceed to an exposition of recursion theoretic reducibilities.  Elementary results about degrees of unsolvability are established.  The theory of arithmetical, analytical, and projective hierarchies will be presented.  The study of functionals at this point will provide an entry into the computationally important subject of recursion at higher types.  Basic parts of the theory of inductive definitions and monotone operators will be presented.  If time and interest permit, this theory will be applied to the analysis of the semantical paradoxes.  The course will conclude with an investigation of the lower levels of the analytical and projective hierarchies.  Applications to the degrees of unsolvability of various logical systems will be presented, connections between the hierarchies and predicative formal systems will be established, and the relation between the theory of the projective hierarchy and topics in classical descriptive set theory will be indicated.\n\n(Course offered in fall term only.)", "title": "571. (PHIL411) Recursion Theory. (A)"}, {"offercode": "(C)", "crosslist": "(PHIL413)", "num": "572", "description": "SM 572. (PHIL413) Set Theory. (C) \n\nThis course is an introduction to set theory.  It will begin with a study of Zermelo-Fraenkel set theory (ZF) as a partial description of the cumulative hierarchy of sets.  Elementary properties of cardinal and ordinal numbers will be developed in ZF.  The inner model of constructible sets will be used to extablish the relative consistency of the axiom of choice and the generalized continuum hypothesis with ZF.  The method of forcing will be introduced to establish the independence of the continuum hypothesis from ZF and other independence results.  Large cardinals and their bearing on the resolution of questions about the continuum will be considered.\n\n(One-term course offered either term.)", "title": "572. (PHIL413) Set Theory. (C)"}, {"offercode": "(A)", "crosslist": "", "num": "573", "description": "573. Software Engineering. (A) Prerequisite(s): CIT 591 and 593, or CIS 120, 121, and 240, or equivalent coursework; prior knowledge of Java required. \n\nBUILDING LARGE INFORMATION SYSTEMS: This course will be a practicum in specifying, designing and documenting, building, testing and administering corporate-sized software projects that invariably have a database component, security and firewall issues, a web-based user interface, and special client programs running as applications elsewhere on a network.  The course will examine one or more existing, commercial systems (such as the Blackboard systemin use at Penn) and will address conceptual issues surrounding large software systems, such as ways to estimate project size, and ways to integrate differenttechnologies into a maintainable system design.  There will be substantial programming assignments using Microsoft Visual Studio .NET languages such as C#to create components of a larger system.  Possible projects include a web interface, a client (and possibly server-side programming) for a SOAP/XML basedweb service, a Windows-based client with graphical interface, and rudimentary SQL database table and view design.  The idea of using UML for code generation, and writing \"built-in\" unit tests for objects to automate future retesting willbe examined.\n\n(Course offered in fall term only.)", "title": "573. Software Engineering. (A)"}, {"offercode": "(A)", "crosslist": "", "num": "580", "description": "580. Machine Perception. (A) Prerequisite(s): A solid grasp of the fundamentals of linear algebra.  Some knowledge of programming in C and/or Matlab. \n\nAn introduction to the problems of computer vision and other forms of machine perception that can be solved using geometrical approaches rather than statistical methods.  Emphasis will be placed on both analytical and computational techniques.  This course is designed to provide students with an exposure to the fundamental mathematical and algorithmic techniques that are used to tackle challenging image based modeling problems.  The subject matter of this course finds application in the fields of Computer Vision, Computer Graphics and Robotics.  Some of the topics to be covered include: Projective Geometry, Camera Calibration, Image Formation, Projective, Affine and Euclidean Transformations, Computational Stereopsis, and the recovery of 3D structure from multiple 2D images.  This course will also explore various approaches to object recognition that make use of geometric techniques, these would include alignment based methods and techniques that exploit geometric invariants.  In the assignments for this course, students will be able to apply the techniques to actual computer vision problems.\n\n(Course offered in fall term only.)", "title": "580. Machine Perception. (A)"}, {"offercode": "(C)", "crosslist": "(CIS 482)", "num": "582", "description": "582. (CIS 482) Logic in Computer Science. (C) Prerequisite(s): CIS 260 or CIT 592 or equivalent. \n\nLogic has been called the calculus of computer science as it plays a fundamental role in computer science, similar to that played by calculus in the physical sciences and traditional engineerng disciplines.  Indeed, logic is useful in areas of computer science as disparate as architecture (logic gates), software engineerng (specification and verification), programming languages (semantics, logic programming), databases (relational algebra and SQL), artificial intelligence (automatic theorem proving), algorithms (complexity and expressiveness), and theory of computation (general notions of computability).  CIS 582 provides the students with a thorough introduction to mathematical logic, covering in depth the topics of syntax, semantics, decision procedures, formal proof systems, and soundness and completeness for both propositional and first-order logic.  The material is taught froma computer science perspective, with an emphasis on algorithms, computational complexity, and tools.  Projects will focus on problems in circuit design, specification and analysis and protocols, and query evaluation in databases.\n\n(One-term course offered either term.)", "title": "582. (CIS 482) Logic in Computer Science. (C)"}, {"offercode": "(B)", "crosslist": "(MATH676)", "num": "610", "description": "610. (MATH676) Advanced Geometric Methods in Computer Science. (B) Prerequisite(s): CIS 510 or coverage of equivalent material. \n\nThe purpose of this course is to present some of the advanced geometric methods used in geometric modeling, computer graphics, computeer vision, etc. The topics may vary from year to year, and will be selected among the following subjects (nonexhaustive list): Introduction to projective geometry with applications to rational curves and surfaces, control points for rational curves, retangular and triangular rational patches, drawing closed rational curves and surfaces; Differential geometry of curves (curvature, torsion, osculating planes, the Frenet frame, osculating circles, osculating spheres); Differential geometry of surfaces (first fundamental form, normal curvature, second fundamental form, geodesic curvature, Christoffel symbols, principal curvatures, Gaussian curvature, mean curvature, the Gauss map and its derivative dN, the Dupin indicatrix, the Theorema Egregium equations of Codazzi-Mainadi, Bonnet's theorem, lines of curvatures, geodesic torsion, asymptotic lines, geodesic lines, local Gauss-Bonnet theorem).\n\n(Course offered in spring term only.)", "title": "610. (MATH676) Advanced Geometric Methods in Computer Science. (B)"}, {"offercode": "(M)", "crosslist": "(ESE 617, MEAM613)", "num": "613", "description": "613. (ESE 617, MEAM613) Nonlinear Control Theory. (M) Prerequisite(s): A sufficient background to linear algebra (ENM 510/511 or equivalent) and a course in linear control theory (MEAM 513 or equivalent), or written permission of the instructor. \n\nThe course studies issues in nonlinear control theory, with a particular emphasis on the use of geometric principles. \n\nTopics include: controllability, accessibility, and observability, and observability for nonlinear systems; Forbenius' theorem; feedback and input/outpub linearizaiton for SISO and MIMO systems; dynamic extension; zero dynamics; output tracking and regulation; model matching disturbance decoupling; examples will be taken from mechanical systems, robotic systems, including those involving nonholonomic constraints, and active control of vibrations.\n\n(Course not offered every year.)", "title": "613. (ESE 617, MEAM613) Nonlinear Control Theory. (M)"}, {"offercode": "(B)", "crosslist": "", "num": "620", "description": "SM 620. Advanced Topics in Artificial Intelligence. (B) Prerequisite(s): CIS 520 or equivalent. \n\nDiscussion of problems and techniques in Artificial Intelligence (AI): Knowledge Representation, Natural Language Processing, Constraint Systems, Machine Learning; Applications of AI.\n\n(Course offered in spring term only.)", "title": "620. Advanced Topics in Artificial Intelligence. (B)"}, {"offercode": "(C)", "crosslist": "", "num": "630", "description": "SM 630. Advanced Topics in Natural Language Processing. (C) Prerequisite(s): CIS 530 or equivalent or permission of instructor. \n\nDifferent topics selected each offering; e.g., NL generation, question-answering, information extraction, machine translation, restricted grammar formalisms, computational lexical semantics, etc.\n\n(One-term course offered either term.)", "title": "630. Advanced Topics in Natural Language Processing. (C)"}, {"offercode": "(A)", "crosslist": "(BIOL537, GCB 537)", "num": "635", "description": "SM 635. (BIOL537, GCB 537) Advanced Computational Biology. (A) Prerequisite(s): Biol 536 or permission of the instructor. \n\nDiscussion of special research topics.\n\n(Course offered in fall term only.)", "title": "635. (BIOL537, GCB 537) Advanced Computational Biology. (A)"}, {"offercode": "(C)", "crosslist": "", "num": "639", "description": "SM 639. Statistical approaches to Natural Language Understanding. (C) \n\nThis course examines the recent development of corpus-based techniques in natural language processing, focussing on both statistical and primarily symbolic learning techniques.  Particular topics vary from year to year.\n\n(One-term course offered either term.)", "title": "639. Statistical approaches to Natural Language Understanding. (C)"}, {"offercode": "(B)", "crosslist": "", "num": "640", "description": "SM 640. Advanced Topics in Software Systems. (B) Prerequisite(s): CIS 505 or equivalent. \n\nDifferent topics selected for each course offering.\n\n(Course offered in spring term only.)", "title": "640. Advanced Topics in Software Systems. (B)"}, {"offercode": "(B)", "crosslist": "", "num": "650", "description": "SM 650. Advanced Topics in Databases. (B) Prerequisite(s): CIS 550. \n\nAdvanced topics in databases: distributed databases, integrity constraints, failure, concurrency control, relevant relational theory, semantics of data models, the interface between programming of languages and databases. Object- oriented databases.  New topics are discussed each year.\n\n(Course offered in spring term only.)", "title": "650. Advanced Topics in Databases. (B)"}, {"offercode": "(B)", "crosslist": "", "num": "660", "description": "SM 660. Advanced Topics in Computer Graphics and Animation. (B) Prerequisite(s): CIS 560 or permission of the instructor. \n\nThis course emphasizes the review and understanding of current computer graphics, interaction, and virtual environment research techniques and problems.  Research-level topics are based on recent ACM SIGGRAPH papers and special effects techniques, through student-led discussions and both oral and visual presentations.  A software project is required.\n\n(Course offered in spring term only.)", "title": "660. Advanced Topics in Computer Graphics and Animation. (B)"}, {"offercode": "(C)", "crosslist": "", "num": "670", "description": "SM 670. Advanced Topics in Programming Languages. (C) Prerequisite(s): CIS 500, or equivalent. \n\nThe details of this course change from year to year, but its purpose is to cover theoretical topics related to programming languages.  Some central topics include: denotational vs operational semantics, domain theory and category theory, the lambda calculus, type theory (including recursive types, generics, type inference and modules), logics of programs and associated completeness and decidability problems, specification languages, and models of concurrency.  The course requires a degree of mathematical sophistication.\n\n(One-term course offered either term.)", "title": "670. Advanced Topics in Programming Languages. (C)"}, {"offercode": "(C)", "crosslist": "", "num": "673", "description": "673. Computer-Aided Verification. (C) Prerequisite(s): Basic knowledge of algorithms, data structures, automata theory, propositional logic, operating systems, communication protocols, and hardware (CSE 262, CSE 380, or permission of the instructor). \n\nThis course introduces the theory and practice of formal methods for the design and analysis of concurrent and embedded systems.  The emphasis is on the underlying logical and automata-theoretic concepts, the algorithmic solutions, and heuristics to cope with the high computational complexity. Topics: Models and semantics of reactive systems; Verification algorithms; Verification techniques.  Topics may vary depending on instructor.\n\n(One-term course offered either term.)", "title": "673. Computer-Aided Verification. (C)"}, {"offercode": "(A)", "crosslist": "", "num": "677", "description": "677. Advanced Topics in Algorithms and Complexity. (A) Prerequisite(s): Consent of the instructor. \n\nThis course covers various aspects of discrete algorithms.  Graph-theoretic algorithms in computational biology, and randomization and computation; literature in dynamic graph algorithms, approximation algorithms, and other areas according to student interests.\n\n(Course offered in fall term only.)", "title": "677. Advanced Topics in Algorithms and Complexity. (A)"}, {"offercode": "(B)", "crosslist": "", "num": "680", "description": "SM 680. Advanced Topics in Machine Perception. (B) A previous course in machine perception or knowledge of image processing, experience with an operating system and language such as Unix and C, and aptitude for mathematics. \n\nGraduate seminar in advanced work on machine perception as it applies to robots as well as to the modelling of human perception.  Topics vary with each offering.\n\n(Course offered in spring term only.)", "title": "680. Advanced Topics in Machine Perception. (B)"}, {"offercode": "(C)", "crosslist": "", "num": "682", "description": "682. Friendly Logics. (C) \n\nThe use of logical formalisms in Computer Science is dominated by a fundamental conflict: expressiveness vs. algorithmic tractability.  For example, database constraint logics, temporal logics, description logics, certain fragments of first and second-order logics, certain equational logics, and certain logics related to lambda calculi are successful compromise in this conflict: (1) they are expressive enough for practical specifications certain areas, and (2) there exist interesting algorithms for the automated use of these specifications.  Interesting connections can be made between these formalisms and this in turn benefits research in databases, programming languages, computer-aided verification and AI. \n\nSpecific topics change from one offering to another, leading to the possibility of repeated credit if allowed by the instructor.\n\n(One-term course offered either term.)", "title": "682. Friendly Logics. (C)"}, {"offercode": "(M)", "crosslist": "", "num": "700", "description": "700. Computer and Information Science Topics. (M) \n\nOne time course offerings of special interest.\n\n(Course not offered every year.)", "title": "700. Computer and Information Science Topics. (M)"}, {"offercode": "(C)", "crosslist": "", "num": "899", "description": "899. Independent Study. (C) \n\nFor students studying a specific advanced subject area in computer and information science.  Involves coursework and clas presentations.  A CIS 899 course unit will invariably include formally gradable work comparable to that in a normal 500 or 600 level course.  This designation should not be used for ongoing research towards a thesis, for which the CIS 999 designation should be used.\n\n(One-term course offered either term.)", "title": "899. Independent Study. (C)"}, {"offercode": "", "crosslist": "", "num": "990", "description": "990. Masters Thesis. \n\nFor master's students who have taken ten couse units and need only to complete the writing of a thesis or finish work for incompletes in order to graduate. CIS 990 carries full time status with zero course units and may be taken only once.", "title": "990. Masters Thesis."}, {"offercode": "", "crosslist": "", "num": "995", "description": "995. Dissertation. \n\nFor Ph.D. candidates working exclusively on their dissertation research, having completed 40 course units of credit.", "title": "995. Dissertation."}, {"offercode": "(C)", "crosslist": "", "num": "996", "description": "996. Resesarch Seminar. (C) \n\nIntroduction to research being conducted in the department.  Mandatory for firstyear doctoral students.  Taken as fifth course for no credit at no cost.\n\n(One-term course offered either term.)", "title": "996. Resesarch Seminar. (C)"}, {"offercode": "(C)", "crosslist": "", "num": "999", "description": "999. Thesis/Dissertation Research. (C) \n\nFor students working on an advanced research program leading to the completion of master's thesis or PhD dissertation requirements.\n\n(One-term course offered either term.)", "title": "999. Thesis/Dissertation Research. (C) "}]